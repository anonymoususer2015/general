#### CORSO WORDPRESS ####
## TEACHER JEFFREY WAY ##
##### TUTSPLUS.COM ######

### Per creare un Plugin ###
1) Posizionarsi su : wp-content/plugin e creare una cartella col nome del proprio plugin
2) Iniziare con delle righe commentate relative a info sul plugin: 

/*
Plugin Name: JW Filter		
Plugin URI: giub.it			//URL Documentazione
Description: demo plugin twitter
Author: Daniele Covallero
Author URI: giub.it
Version: 1.0
*/

## Plugin Esempio:

/** 1
  * - 
  * Scrivere un pluging Wordpress che invii una mail
  * all'admin ogni volta che viene postato un commento
  * (già presente di defa<div></div>ult su wordpress)
  **/

add_action('comment_post', function() {
	$email = get_bloginfo('admin_email');
	wp_mail(
		$email,
		'Nuovo commento',
		"E' stato postato un nuovo commento sul tuo sito" 
	);
});

/** 2
  * - 
  * Scrivere un pluging Wordpress che mostri prima del
  * post una lista di post collegati alla categoria
  **/

add_filter('the_content', function($content) {
	$id = get_the_id();
	if(!is_singular('post')) {	//Se è una pagina di categoria o altro
		return $content;
	}

	$terms = get_the_terms($id, 'category');
	$cats = array();

	foreach($terms as $term) { //Salvo le categorie a cui è correlato il post
		$cats[] = $term->car_ID;
	}

	//Filtro per i prossimi 3 post delle categorie correlate
	$loop = new WP_Query(
		array(
			'posts_per_page' => 3,
			'category__in' => $cats,
			'order_by' => 'rand',
			'post__not_in' => array($id)
		);
	);

	//Aggiungo al testo un link agli articoli correlati
	if($loop->have_posts()) {
		$content .= '
			<h2>Postresti essere interessato anche a:</h2>
			<ul class="related-category-posts">';

		while($loop->have_posts()) {
			$loop->the_post();

			$conent .= '
				<li>
					<a href="'.get_permalink().'">'.$get_the_title().'</a>
				</li>';
		}

		$content .= '</ul>';
		wp_reset_query();
	}
	return $content;
});


/** 3
  * - 
  * Scrivere un pluging Wordpress che sovrascriva il 
  * "[twitter]" scritto nei post linkando al relativo
  * autore
  **/

//Primo parametro: [nome_shortcode]
//Secondo parametro: $atts contiene un array di attributi dello shortcode twitter
//Terzo parametro: $content è il contenuto che si trova tra [twitter]...[twitter]
//Shortcode esempio: [twitter username="giub"] Seguimi su Twittwer! [/twitter]
//Serve un return, con echo stampa sempre a inizio post

add_shortcode('twitter', function($atts, $content) {

	//Funzione per sovrascrivere gli attributi dello shortcode non settati
	$atts = shortcode_atts(	
		array(
			'username' => 'giub',
			'content'  => !empty($content)? $content : 'Seguimi su Twittwer'
		), $atts
	);

	//Funzione che trasforma gli indici dell'array in singole variabili
	extract($atts);

	return "<a href='http://twitter.com/$username'>$content</a>";
});


/** 4
  * - 
  * Basandoci sull'esempio precedente:
  * Scrivere un twitter shortcode che cashi gli ultimi 5 tweet
  * all'account a cui linka
  **/

add_shortcode('twitter', function($atts, $content) {

	$atts = shortcode_atts(	
		array(
			'username' 			=> 'giub',
			'content'  			=> !empty($content)? $content : 'Seguimi su Twittwer',
			'show_tweets' 		=> false,
			'tweet_reset_time' 	=> 10,
			'num_tweets' 		=> 5
		), $atts
	);	
	extract($atts);

	if($show_tweets) {
		$tweets = fetch_tweets($num_tweets, $username, $tweet_reset_time);
	}

	return "$tweets
			<p><a href='http://twitter.com/$username'>$content</a></p>";
	
});

function fetch_tweets($num_tweets, $username, $tweet_reset_time) {
	global $id;
	$recent_tweets = get_post_meta($id, 'jw_recent_tweets');
	reset_data($recent_tweets, $tweet_reset_time);

	//Se non ci sono tweet recenti cachati
	if(empty($recent_tweets)) {
		$tweets = curl("http://twitter.com/statuses/user_timeline/$username.json");

		$data = array();
		foreach($tweets as $tweet) {
			if($num_tweets-- === 0) brek;
			$data[] = $tweet->text;
		}

		$recent_tweets = array((int)date('i', time()));
		$recent_tweets[] = '<ul class="jw_tweets"><li>'.implode('</li><li>', $data).'</li></ul>';
		cache($recent_tweets);
		return ((isset($recent_tweets[0][1])? $recent_tweets[0][1] : $recent_tweets[1]);
	}	
}

function curl($url) {
	$c = curl_init($url);
	curl_setopt($c, CURLOPT_RETURNTRANSFER, 1);
	curl_setopt($c, CURLOPT_CONNECTTIMEOUT, 3);
	curl_setopt($c, CURLOPT_TIMEOUT, 5);

	return json_decode(curl_exex($c));
}

function cache($recent_tweets) {
	// [0] = current minute
	// [1] = tweet html
	global $id;

	//Aggiunge al post (solo una volta -> ultimo parametro "true") 
	//una variabile custom che indica con i tweet (cashati) 
	add_post_meta($id, 'jw_recent_tweets', $recent_tweets, true);
}

//Se la cache è troppo vecchia la resetta
function reset_data($recent_tweets, $tweet_reset_time) {
	global $id;

	//Se è settata una data nei tweet cachati
	if(isset($recent_tweets[0][0])) {
		$delay = $recent_tweets[0][0] + (int)$tweet_reset_time;
		if($delay >= 60) $delay -= 60;
		if($delay <=  (int)date('i', time())) {
			delete_post_meta($id, 'jw_recent_tweets');
		}
	}
}


/** 5
  * - 
  * Scrivere un semplice widget con title e descrizione settabile
  **/

error_reporting(E_ALL);
/*
Plugin Name: Messager Widget		
Plugin URI: giub.it			//URL Documentazione
Description: Display any message designated
Author: Daniele Covallero
Author URI: giub.it
Version: 1.0
*/

class Messager extend WP_Widget {

	//Descrizione della barra del widget nell'area amministrativa
	function __contruct() {
		$params = array(
			'description' => 'Display messages to readers',
			'name'		  => 'Messager'
		);

		parent:: __construct('Messager', '', $params);
	}

	//La form del widget che si ha quando questo è attivo
	public function form($instance) {
		extract($instance);
		?>
		<p>
			<label for="<?php echo $this->get_field_name('title'); ?>">
				Title:</label>
			<input class="widefat" 
				id="<?php echo $this->get_field_name('title'); ?>"
				name="<?php echo $this->get_field_name('title'); ?>"
				value="<?php if(isset($title)) echo esc_attr($title); ?>" />
		</p>

		<p>
			<label for="<?php echo $this->get_field_name('description'); ?>">
				Description:</label>
			<textarea class="widefat" rows="10"
				id="<?php echo $this->get_field_name('description'); ?>"
				name="<?php echo $this->get_field_name('description'); ?>"><?php if(isset($description)) echo esc_attr($description); ?>
				</textarea>
		</p>
		<?php
	}

	//Parte grafica nel frontend
	public function widget($args, $instance) {
		extract($args);
		extract($instance);

		$title = apply_filters('widget_title', $title);
		$description = apply_filters('widfet_description', $description);

		if(empty($title)) $title = 'Cosa sto pensando';

		echo $before_widget;
			echo $before_title . $title . $after_title;
			echo '<p>'.$description.'<p>';
		echo $after_widget;
	}
}

add_action('widgets_init', 'jw_register_messanger');
function jw_register_messanger() {
	register_widget('Messager');
}


/** 6
  * - 
  * Basandoci sul plugin precedente creare un widget per twitter
  **/

/*
Plugin Name: JW_Twitter_Widget		
Plugin URI: giub.it			//URL Documentazione
Description: Display any message designated
Author: Daniele Covallero
Author URI: giub.it
Version: 1.0
*/

class JW_Twitter_Widget extend WP_Widget {

	//Descrizione della barra del widget nell'area amministrativa
	function __contruct() {
		$options = array(
			'description' => 'Display and cache tweets',
			'name'		  => 'Display Tweets'
		);

		parent:: __construct('JW_Twitter_Widget', '', $options);
	}

	//La form del widget che si ha quando questo è attivo
	public function form($instance) {
		extract($instance);
		$t_id = $this->get_field_id('title');
		$usr_id = $this->get_field_id('username');
		$twn_id = $this->get_field_id('tweet_count');

		?>
		<!-- Title Field -->
		<p>
			<label for="<?=$t_id ?>">Title:</label>
			<input type="text" class="widefat"
			id="<?=$t_id ?>" name="<?=$t_id ?>"
			value="<?php if(isset($title)) echo esc_attr($title); ?>" />
 		</p>

 		<!-- Username Field -->
 		<p>
			<label for="<?=$usr_id ?>">Username:</label>
			<input type="text" class="widefat"
			id="<?=$usr_id ?>" name="<?=$usr_id ?>"
			value="<?php if(isset($username)) echo esc_attr($username); ?>" />
 		</p>

 		<!-- Tweets Number Field -->
 		<p>
			<label for="<?=$twn_id ?>">
				Number of Tweets:
			</label>

			<input type="number" class="widefat"
			style="width: 40px;" min="1" max="10"
			id="<?=$twn_id ?>" name="<?=$twn_id ?>"
			value="<?php !empty($tweet_count)? $tweet_count : 5 ?>" />
 		</p>

		<?php
	}

	//Parte grafica nel frontend
	public function widget($args, $instance) {
		extract($args);
		extract($instance);

		if(empty($title)) $title = 'Recent Tweet';

		$data = $this->twitter($tweet_count, $username);

		if($data !== false && isset($data->tweets)) {
			echo $before_widget;
				echo $before_title;
					echo $title;
				echo $after_title;

				echo '<ul><li>'.implode('</li><li>', $data->tweets).'</li></ul>'
			echo $after:widget;
		}
	}

	private function twitter($tweet_count, $username) {
		if(empty($username)) return false;

		//Prendo i dati caschati nel DB se posso
		$tweets = get_transient('recent_tweets_widget');

		if(!$tweets ||
			$tweets->username !== $username ||
			$tweets->tweet_count !== $tweet_count) {
			fetch_tweets($tweet_count, $username);
		}

		return $tweets;
	}

	private function fetch_tweets($tweet_count, $username) {
		$tweets = wp_remote_get("http://twitter.com/statuses/user_timeline/$username.json");
		$tweets = json_decode($tweets['body']);

		if(isset($tweets->error)) return false;

		//Preparo i dati in una classe vuota
		$data = new stdClass();
		$data->username = $username;
		$data->tweet_count = $tweet_count;
		$data->tweets = array();

		foreach($tweets as $tweet) {
			if($tweet_count-- === 0) break;
			$data->tweet[] = $this->filter_tweet($tweet->text);
		}

		//Casho la classe nel DB
		set_transient('recent_tweets_widget', $data, 60*5);
	}

	private function filter_tweet($tweet) {
		//Correggo i link
		$tweet = preg_replace('/(http[^\s]+)/im', '<a rel="nofollow" href="$1">$1</a>', $tweet);
	
		//Miglioro l'username
		$tweet = preg_replace('/@([^\s]+)/i', '<a href="http://twitter.com/$1" rel="nofollow">$1</a>', $tweet);
		return $tweet;
	}
}

add_action('widgets_init', 'register_jw_twitter_widget');
function register_jw_twitter_widget() {
	register_widget('JW_Twitter_Widget');
}

/** 7
  * - 
  * Creare un cron job con Wordpress + mini area amministrativa
  * che mostra i cronjob in esecuzione
  **/

/*
Plugin Name: JW Cron	
Plugin URI: giub.it			//URL Documentazione
Description: Demo WP CronJob
Author: Daniele Covallero
Author URI: giub.it
Version: 1.0
*/

add_action('init', function() {

	$time = wp_next_scheduled('jw_cron_hook');
	wp_unschedule_event($time, 'jw_cron_hook');

	if(!wp_next_scheduled('jw_cron_hook') {
		wp_schedule_event(time(), 'two-minutes', 'jw_cron_hook');
		//Non ho capito bene a cosa serve
		//wp_schedule_single_eventi(time() + 3600, 'jw_cron_hook');
	}	
});

//Area amministrativa
add_action('admin_menu', function() {
	add_options_page('Cron Settings', 'Cron Settings', 'manage settings', 'jw-cron', function() {
		$cron = get_cron_array();
		$schedules = wp_get_schedules();
		?>
		<div class="wrap">
			<h2>Cron Events Scheduled</h2>
			<?php
				foreach($schedules as $name) {
					echo "<h3>". $name['display'] . ': ' . $name['interval'] . "</h3>";
				}
			?>
		</div>
		<?php
	});
});

add_action('jw_cron_hook', function() {
	$str = time();
	wp_mail('web@giub.it', 'Scheduled with WP Cron!', "This email was sent at $str.");
});

add_filter('cron_schedules', function($schedules) {
	$schedules['two-minutes'] = array (
		'interval'	=> 120,
		'display'	=> 'Evry two minutes'
	);

	$schedules['ten-miuìnutes'] = array(
		'interval'  => 600,
		'display'	=> 'Every Ten Minutes'
	);

	return $schedules;
});

/** 8
  * - 
  * Creare una pagina ammistrativa per customizzare il tema
  **/

/*
Plugin Name: G Options
Plugin URI: giub.it			//URL Documentazione
Description: Demo WP Options
Author: Daniele Covallero
Author URI: giub.it
Version: 1.0
*/

//NOTA: http://.../wp-admin/options.php contiene un array con tutte le opzioni del nostro sito wordpress
//NOTA: Il plugin fa uno storage delle optioni in un'array, per richiamarlo nel frontend: $o = get_options('jw_plugin_options');

class g_Opt_page {
	function __construct() {
		add_action('admin_menu', array(&$this, 'admin_menu'));
		add_action( 'admin_init', array( $this, 'register_mysettings' ));
	}
	function admin_menu () {		
		add_theme_page('Daniele - Amministrazione sito','Lifeclass Admin','manage_options','amm_daniele',array($this, 'settings_page'));
	}
	function register_mysettings() { // whitelist options
	  register_setting('g_Opt-group', 'array_key', array($this, 'check_ID'));

	  add_settings_section(
            'g_opt_ammsettings',
            'Admin Area',
            array( $this, 'print_section_info' ),
            'g_Opt'
        );	
            
        add_settings_field(
            'ck_amm_modify', 
            'Sito in manutenzione', 
            array( $this, 'create_an_id_field' ), 
            'g_Opt',
            'g_opt_ammsettings'			
        );		
    }
	
    public function check_ID( $input ) {
    	//Checkbox Sito in manutenzione  	
    	
        $mid = $input['ck_amm_modify'];			
        if ( get_option( 'ck_amm_modify' ) === FALSE ) add_option( 'ck_amm_modify', $mid );
        else update_option( 'ck_amm_modify', $mid );            
        
        return $mid;
    }
	
    public function print_section_info(){
        //print 'Enter your setting below:';
    }
	
    public function create_an_id_field(){
        ?><input type="checkbox" id="ck_amm_modify" name="array_key[ck_amm_modify]" <?php echo ((get_option( 'ck_amm_modify' ))? 'checked':''); ?> /><?php
    }
	
	public  function settings_page () {
		?>
		<div class="wrap">
		    <?php screen_icon(); ?>
		    <h2>Settaggi Amministrativi Lifeclass</h2>			
		    <form method="post" action="options.php">
		        <?php
	                    // This prints out all hidden setting fields
			    settings_fields( 'g_Opt-group' );	
			    do_settings_sections( 'g_Opt' );
			?>
		        <?php submit_button(); ?>
		    </form>
		</div>
		<?php
	}
}
new g_Opt_page;

/** 9
  * - 
  * Creare dei custom post-types per gestire differentemente i tipi di post
  * comprendendo delle tassonomie custom e dei metabox settabili
  **/

/*
Plugin Name: Movies Post Type
Plugin URI: giub.it			//URL Documentazione
Description: Movie post Type 4 Admin Area
Author: Daniele Covallero
Author URI: giub.it
Version: 1.0
*/

class JW_Movies_Post_Type() {
	public function __construct() {
		$this->register_post_type();
		$this->taxonomies();
		$this->metaboxes();
	}

	public function register_post_type() {
		$args = array(
			'labels' => array(
				'name' 					=> 'Movies',
				'singular_name' 		=> 'Movie',
				'add_new'				=> 'Add New Movie',
				'add_new_item' 			=> 'Add New Movie',
				'edit_item' 			=> 'Edit Item',
				'new_item'				=> 'Add New Item',
				'view_item' 			=> 'View Movie',
				'search_items'			=> 'Search Movies',
				'not_found'				=> 'No Movies Found',
				'not_found_in_trash' 	=> 'No Movies Found in Trash'
			),
			'query_var' => 'movies',
			'rewrite'   => array (
				'slug' 	=> '/movies',
			),
			'public' 		=> true,
			'menu_position' => 5,
			//Icone in: wp-admin/images/...
			'menu_icon' 	=> admin_url().'images/media-button-video.gif', 
			'supports' => array(
				'title',
				'thumbnail',
				'editor',
				'excerpt',
				'custom-fields'
			)
		);
		register_post_type('jw_movie', $args);
	}

	public function taxonomies() {
		$taxonomies = array();

		$taxonomies['genre'] = array(
			'hierarchical' => true,
			'query_var' => 'movie_genre',
			'rewrite' 	=> array(
				'slug' 	=> 'movies/genre'
			),
			//Stesse labels prese da sopra
			labels' => array(
				'name' 					=> 'Movies',
				'singular_name' 		=> 'Movie',
				'add_new'				=> 'Add New Movie',
				'add_new_item' 			=> 'Add New Movie',
				'edit_item' 			=> 'Edit Item',
				'new_item'				=> 'Add New Item',
				'view_item' 			=> 'View Movie',
				'search_items'			=> 'Search Movies',
				'not_found'				=> 'No Movies Found',
				'not_found_in_trash' 	=> 'No Movies Found in Trash'
			),
		);

		//Crea un altra lista di categorie a cui associare i post
		$taxonomies['studio'] = array(
			'hierarchical' => true,
			'query_var' => 'movie_studio',
			'rewrite' 	=> array(
				'slug' 	=> 'movies/studios'
			),
			//Stesse labels prese da sopra
			labels' => array(
				'name' 					=> 'Studios',
				'singular_name' 		=> 'Movie',
				'add_new'				=> 'Add New Movie',
				'add_new_item' 			=> 'Add New Movie',
				'edit_item' 			=> 'Edit Item',
				'new_item'				=> 'Add New Item',
				'view_item' 			=> 'View Movie',
				'search_items'			=> 'Search Studios',
				'not_found'				=> 'No Studios Found',
				'not_found_in_trash' 	=> 'No Studios Found in Trash'
			),
		);

		$this->register_all_taxonomies($taxonomies);
	}

	public function register_all_taxonomies($taxonomies) {
		foreach($taxonomies as $name => $arr) {
			register_taxonomy($name, array('jw_movie'), $arr);

		}	
	}

	public function metaboxes() {
		add_action('add_meta_boxes', function() {
			//css id, title, cb func, page, priority, cv func arguments
			add_meta_box('jw_movie_lenght', 'Movie Length', 'movie_length', 'jw_movie');
		});

		functon movie_length($post) {
			$length = get_post_meta($post->ID, 'jw_movie_length', true);
			?>
				<label for="jw_movie_length"> Length: </label>
				<input type="text" class="widefat" name="jw_movie_length" value="<?php echo esc_attr($length); ?>" />
			<?php
		}

		//Salvo il valore del meta Box
		add_action('save_post', function() {
			if(isset($_POST['jw_movie_length'])) {
				update_post_meta(
					$id,
					'jw_movie_length',
					strip_tags($_POST['jw_movie_length'])
				);
			}
		});
	}
}

add_action('init', function() {
	new JW_Movies_Post_Type();
});

/* 9.1
 * Creare la giusta Query per richiedere questi custom post_types
 * Da utilizzare negli shortcut oppure nel frontend
 */

$loop = new WP_Query(
		array(
			'post_type' => 'jw_movie',
			'orderby'	=> 'title'
		)
	);

if($loop->have_posts()) {
	while($loop->have_posts()) {
		$loop->the_post();
		$meta = get_post_meta(get_the_id(), ''); //2° parametro vuoto così returna indipendentemente dal "post-type"

		$post_dates = array(
			'link' 			=> get_the_permalink(),
			'title' 		=> get_the_title(),
			'excerpt'		=> get_the_excerpt(),
			'movie_length' 	=> $meta['jw_movie_length']
		);
	}
}

/** 9
  * - 
  * Creare un plug in per la gestione degli utenti admin
  * Quando si hanno pochi utenti admin meglio togliere
  * manualmente le aree del CMS che non devono utilizzare
  **/

/*
Plugin Name: Remove Admin Menu
Plugin URI: giub.it			
Description: Remove Admin Menu
Author: Daniele Covallero
Author URI: giub.it
Version: 1.0
*/

function remove_menus () {
global $menu;	
	$user = wp_get_current_user();
	if($user->user_email == 'info@lifeclass.it') {
		remove_menu_page('plugins.php');
		remove_menu_page('users.php');
		remove_menu_page('tools.php');
		remove_menu_page('options-general.php');
		remove_menu_page('users.php');
		remove_submenu_page('themes.php','themes.php');
		//Per rimuovere pugine con custom post type
		?><style>.toplevel_page_woocommerce{display:none;}</style><?php
	}
}
add_action('admin_menu', 'remove_menus');

/** 10
  * - 
  * Metabox con textarea per Descrizione Supplementare
  **/
/*
Plugin Name: MetaBox Descrizione Supplementare
Plugin URI: giub.it			
Description: Textarea Descrizione Supplementare
Author: Daniele Covallero
Author URI: giub.it
Version: 1.0
*/

class TextArea_Metabox {
	public function __construct() {
		$this->metaboxes();
	}	

	public function metaboxes() {
		add_action('add_meta_boxes', function() {			
			add_meta_box('onsale_settings', 'Descrizione breve offerta', 'onsale_settings', 'product');
		});		

		//MetaBox Descrizione per lista offerte
		function onsale_settings($post) {
			$id = $post->ID;
			$g_onsale_text 	= get_post_meta($id, 'Descrizione_breve_offerta', true);
			$settings = array(
			    'textarea_name' => 'Descrizione breve offerta',
			    'media_buttons' => true,
			    'textarea_rows' => 9,
			    'tinymce' => array(
			        'theme_advanced_buttons1' => 'bold,italic,underline,|,' .
			            'bullist,blockquote,|,justifyleft,justifycenter' .
			            ',justifyright,justifyfull,|,link,unlink,|' .
			            ',spellchecker,wp_fullscreen,wp_adv'
			    )
			);
			wp_editor( $g_onsale_text, 'g_onsale_text', $settings );
			?> 
			<style>#onsale_settings .wp_themeSkin iframe { background: #fff; }</style>
			<?php
		}

		//Salvo il valore dei Metabox
		add_action('save_post', 'g_mu_save');	

		function g_mu_save($id) {		
			//Dati Descrizione offerta
			if(isset($_POST['Descrizione_breve_offerta']))
				update_post_meta($id,'Descrizione_breve_offerta',$_POST['Descrizione_breve_offerta']) || add_post_meta($id,'Descrizione_breve_offerta', $_POST['Descrizione_breve_offerta']);

		}
	}
}
add_action('init', function() {
	new TextArea_Metabox();
});


/** 11
  * - 
  * Metabox per richiamare iscrizione MailUp
  **/
/*
Plugin Name: MetaBox Mailup
Plugin URI: giub.it			
Description: MetaBox Mailup
Author: Daniele Covallero
Author URI: giub.it
Version: 1.0
*/

class Mailup_Metabox {
	public function __construct() {
		$this->metaboxes();
	}	

	public function metaboxes() {
		add_action('add_meta_boxes', function() {
			//css id, title, cb func, page, priority, cv func arguments
			add_meta_box('mailup_mb', 'Mailup<span id="g_doc"> [<a target="_blank" href="/wp-content/plugins/lc-giub-shortocdes/giub-lifeclass-documentation.txt" />Documentation</a>]</span>', 'mu_settings', 'page');
		});

		function mu_settings($post) {
			$id = $post->ID;
			
			$g_mu_lists 		= get_post_meta($id, 'g_mu_lists', true);
			$g_mu_title 		= get_post_meta($id, 'g_mu_title', true);
			$g_mu_type  		= get_post_meta($id, 'g_mu_type', true);
			$g_mu_display		= get_post_meta($id, 'g_mu_display', true);
			$g_mu_thankyou_page = get_post_meta($id, 'g_mu_thankyou_page', true);

			?>
			<style>
			#mailup_mb td.custom-title { width: 30%; height: 28px; }
			#adv-settings #g_doc { display: none; }
			#mailup_mb tr {  }
			</style>
			<table class="custom-table">
			<tr class="">
				<td class="custom-title">
					<label for="g_mu_lists"> Liste d'iscrizione </label>
				</td>
				<td clas="custom-input">
					<input type="text" class="widefat" name="g_mu_lists" id="g_mu_lists" placeholder="es: 170,171" value="<?php echo esc_attr($g_mu_lists); ?>" />
				</td>
			</tr>
			<tr class="">
				<td class="custom-title">
					<label for="g_mu_title"> Titolo Persuasivo (* Optional)</label>
				</td>
				<td clas="custom-input">
					<input type="text" class="widefat" name="g_mu_title" id="g_mu_title" value="<?php echo esc_attr($g_mu_title); ?>" />
				</td>
			</tr>
			<tr class="">
				<td class="custom-title">
					<label for="g_mu_type"> Tipo </label>
				</td>
				<td clas="custom-input">
					<select class="penguin-select" id="g_mu_type" name="g_mu_type">
						<option value="mailup1" <?php if($g_mu_type == 'mailup1') echo 'selected="selected"'; ?>>mailup1</option>
					</select>
				</td>
			</tr>
			<tr class="">
				<td class="custom-title">
					<label for="g_mu_display"> Mostra </label>
				</td>
				<td clas="custom-input">
					<select class="penguin-select" id="g_mu_display" name="g_mu_display">
						<option value="none" <?php if($g_mu_display == 'none') echo 'selected="selected"'; ?>><?php echo __('Hide', 'alterna'); ?></option>
						<option value="show" <?php if($g_mu_display == 'show') echo 'selected="selected"'; ?>><?php echo __('Show', 'alterna'); ?></option>						
					</select>
				</td>
			</tr>
			<tr class="">
				<td class="custom-title">
					<label for="g_mu_thankyou_page"> <?php echo __('Thankyou Page Url', 'alterna'); ?> </label>
				</td>
				<td clas="custom-input">
					<select class="penguin-select" id="g_mu_thankyou_page" name="g_mu_thankyou_page">
						<option value="/thankyou" <?php if($g_mu_thankyou_page == '/thankyou') echo 'selected="selected"'; ?>>Thankyou</option>
					</select>
				</td>
			</tr>
			</table>				
			<?php			
		}

		//Salvo il valore del meta Box di Mailup
		add_action('save_post', 'g_mu_save');
		
		function g_mu_save($id) {				
			if(isset($_POST['g_mu_lists']))
				update_post_meta($id,'g_mu_lists', strip_tags($_POST['g_mu_lists'])) || add_post_meta($id,'g_mu_lists', strip_tags($_POST['g_mu_lists']));
			if(isset($_POST['g_mu_title']))
				 update_post_meta($id,'g_mu_title',$_POST['g_mu_title']) || add_post_meta($id,'g_mu_title', $_POST['g_mu_title']);
			if(isset($_POST['g_mu_type']))
				update_post_meta($id,'g_mu_type', strip_tags($_POST['g_mu_type'])) || add_post_meta($id,'g_mu_type', strip_tags($_POST['g_mu_type'])); 
			if(isset($_POST['g_mu_display']))
				update_post_meta($id,'g_mu_display', strip_tags($_POST['g_mu_display'])) || add_post_meta($id,'g_mu_display', strip_tags($_POST['g_mu_display']));
			if(isset($_POST['g_mu_thankyou_page']))
				update_post_meta($id,'g_mu_thankyou_page', strip_tags($_POST['g_mu_thankyou_page'])) || add_post_meta($id,'g_mu_thankyou_page', strip_tags($_POST['g_mu_thankyou_page']));
		}
	}
}
add_action('init', function() {
	new Mailup_Metabox();
});


/** 12
  * - 
  * Alert sito in manutenzione quando il check amministrativo relativo è stato premuto
  **/

add_action( 'wp_after_admin_bar_render', 'noModify_banner' );
function noModify_banner() {
	if( get_option( 'ck_amm_modify' ) && is_admin() && $_SERVER['HTTP_HOST'] != 'www.lifeclass.dev')
		echo '<div class="update-nag" style="margin:0;background-color: #FFDACC;border-color: #E67255;-webkit-border-bottom-right-radius: 0px;-webkit-border-bottom-left-radius: 0px;border-bottom-right-radius: 0px;border-bottom-left-radius: 0px;">Attenzione: Sito in manutenzione! Le modifiche effettuate in questa fase non verranno salvate.</div>';
}

/* 13
 * -
 * Modifica dell'Admin Bar di Wordpress
 */
function mytheme_admin_bar_render() {
	global $wp_admin_bar;
	$wp_admin_bar->remove_menu('wp-logo');
	$wp_admin_bar->remove_menu('view-site');

	//Utility sito
	$wp_admin_bar->add_menu( array(
		'parent' => 'site-name', // use 'false' for a root menu, or pass the ID of the parent menu
		'id' => 'this-site-node', // link ID, defaults to a sanitized title value
		'title' => __('Utility sito'), // link title
		'href' => '', // name of file
		'meta' => false // array of any of the following options: array( 'html' => '', 'class' => '', 'onclick' => '', target => '', title => '' );
	));
	$wp_admin_bar->add_menu( array(
		'parent' => 'this-site-node', 
		'id' => 'ab_alt_shortcodes', 
		'title' => __('Shortcode Template'), 
		'href' => 'http://themes.activetofocus.com/alterna/demo/dropcap-blockquote',
		'meta' => array('target' => '_blank') 
	));
	$wp_admin_bar->add_menu( array(
		'parent' => 'this-site-node', 
		'id' => 'ab_g_doc', 
		'title' => __('Documentazione Daniele'), 
		'href' => content_url( '/plugins/lc-giub-shortocdes/giub-lifeclass-documentation.txt'), 
		'meta' => array('target' => '_blank') 
	));		

	//Modificare i nodi dell'Admin Bar
	$all_nodes = $wp_admin_bar->get_nodes();
    foreach($all_nodes as $key => $val) {
        $current_node = $all_nodes[$key];
        $wp_admin_bar->remove_node($key);

        if($current_node->title == 'Lifeclass centri benessere') {
        	echo "<style>
		        	.lc-wpbar-ico { background-image: url(http://www.lifeclass.it/wp-content/themes/alterna/img/lc-favico-minwhite.png);position: relative;float: left;background-size: 16px 16px; }
		        	.menupop.hover .lc-wpbar-ico { background-image: url(http://www.lifeclass.it/wp-content/themes/alterna/img/lc-favico-minblack.png); }
	        	  </style>";
        	
        	$current_node->title = '<span class="lc-wpbar-ico" style="width: 16px;height: 16px;margin: 5px 6px 0 0;"></span>';
        }
        $wp_admin_bar->add_node($current_node);
    }
}
add_action( 'wp_before_admin_bar_render', 'mytheme_admin_bar_render' );



/* 14
 * -
 * Daniele - esempio resize immagine in Wordpress: Libreria :: image_editor
 */
$single_image_size = get_option('shop_single_image_size', true);
$g_size = array('width' => $single_image_size['width'], 'height' => $single_image_size['height']);
$g_thumb = wp_get_attachment_image_src( get_post_thumbnail_id(), array($g_size['width'], $g_size['height']) );
var_dump($g_thumb);

if(!empty($g_thumb[0])) {
	$uploads = wp_upload_dir();
	$thumb_path = str_replace( $uploads['baseurl'], $uploads['basedir'], $g_thumb[0]);
	$full_path  = str_replace( $uploads['baseurl'], $uploads['basedir'], $image_link);

	//Daniele - Mod Resize Image
	$image = wp_get_image_editor( $full_path );
	if ( ! is_wp_error( $image ) ) {
	    //$image->rotate( 0 );
	    //var_dump($g_thumb);
	    $image->resize( $g_size['width'], $g_size['height'], false );
	    $image->save( $thumb_path );

	    $image_thumb = wp_get_image_editor( $thumb_path );
	    $g_size = $image_thumb->get_size();
	}
}