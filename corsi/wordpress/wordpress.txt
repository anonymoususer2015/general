#### CORSO WORDPRESS ####
## TEACHER JEFFREY WAY ##
##### TUTSPLUS.COM ######

### Per creare un Plugin ###
1) Posizionarsi su : wp-content/plugin e creare una cartella col nome del proprio plugin
2) Iniziare con delle righe commentate relative a info sul plugin: 

/*
Plugin Name: JW Filter		
Plugin URI: giub.it			//URL Documentazione
Description: demo plugin twitter
Author: Daniele Covallero
Author URI: giub.it
Version: 1.0
*/

## Plugin Esempio:

/** 1
  * - 
  * Scrivere un pluging Wordpress che invii una mail
  * all'admin ogni volta che viene postato un commento
  * (già presente di defa<div></div>ult su wordpress)
  **/

add_action('comment_post', function() {
	$email = get_bloginfo('admin_email');
	wp_mail(
		$email,
		'Nuovo commento',
		"E' stato postato un nuovo commento sul tuo sito" 
	);
});

/** 2
  * - 
  * Scrivere un pluging Wordpress che mostri prima del
  * post una lista di post collegati alla categoria
  **/

add_filter('the_content', function($content) {
	$id = get_the_id();
	if(!is_singular('post')) {	//Se è una pagina di categoria o altro
		return $content;
	}

	$terms = get_the_terms($id, 'category');
	$cats = array();

	foreach($terms as $term) { //Salvo le categorie a cui è correlato il post
		$cats[] = $term->car_ID;
	}

	//Filtro per i prossimi 3 post delle categorie correlate
	$loop = new WP_Query(
		array(
			'posts_per_page' => 3,
			'category__in' => $cats,
			'order_by' => 'rand',
			'post__not_in' => array($id)
		);
	);

	//Aggiungo al testo un link agli articoli correlati
	if($loop->have_posts()) {
		$content .= '
			<h2>Postresti essere interessato anche a:</h2>
			<ul class="related-category-posts">';

		while($loop->have_posts()) {
			$loop->the_post();

			$conent .= '
				<li>
					<a href="'.get_permalink().'">'.$get_the_title().'</a>
				</li>';
		}

		$content .= '</ul>';
		wp_reset_query();
	}
	return $content;
});


/** 3
  * - 
  * Scrivere un pluging Wordpress che sovrascriva il 
  * "[twitter]" scritto nei post linkando al relativo
  * autore
  **/

//Primo parametro: [nome_shortcode]
//Secondo parametro: $atts contiene un array di attributi dello shortcode twitter
//Terzo parametro: $content è il contenuto che si trova tra [twitter]...[twitter]
//Shortcode esempio: [twitter username="giub"] Seguimi su Twittwer! [/twitter]
//Serve un return, con echo stampa sempre a inizio post

add_shortcode('twitter', function($atts, $content) {

	//Funzione per sovrascrivere gli attributi dello shortcode non settati
	$atts = shortcode_atts(	
		array(
			'username' => 'giub',
			'content'  => !empty($content)? $content : 'Seguimi su Twittwer'
		), $atts
	);

	//Funzione che trasforma gli indici dell'array in singole variabili
	extract($atts);

	return "<a href='http://twitter.com/$username'>$content</a>";
});


/** 4
  * - 
  * Basandoci sull'esempio precedente:
  * Scrivere un twitter shortcode che cashi gli ultimi 5 tweet
  * all'account a cui linka
  **/

add_shortcode('twitter', function($atts, $content) {

	$atts = shortcode_atts(	
		array(
			'username' 			=> 'giub',
			'content'  			=> !empty($content)? $content : 'Seguimi su Twittwer',
			'show_tweets' 		=> false,
			'tweet_reset_time' 	=> 10,
			'num_tweets' 		=> 5
		), $atts
	);	
	extract($atts);

	if($show_tweets) {
		$tweets = fetch_tweets($num_tweets, $username, $tweet_reset_time);
	}

	return "$tweets
			<p><a href='http://twitter.com/$username'>$content</a></p>";
	
});

function fetch_tweets($num_tweets, $username, $tweet_reset_time) {
	global $id;
	$recent_tweets = get_post_meta($id, 'jw_recent_tweets');
	reset_data($recent_tweets, $tweet_reset_time);

	//Se non ci sono tweet recenti cachati
	if(empty($recent_tweets)) {
		$tweets = curl("http://twitter.com/statuses/user_timeline/$username.json");

		$data = array();
		foreach($tweets as $tweet) {
			if($num_tweets-- === 0) brek;
			$data[] = $tweet->text;
		}

		$recent_tweets = array((int)date('i', time()));
		$recent_tweets[] = '<ul class="jw_tweets"><li>'.implode('</li><li>', $data).'</li></ul>';
		cache($recent_tweets);
		return ((isset($recent_tweets[0][1])? $recent_tweets[0][1] : $recent_tweets[1]);
	}	
}

function curl($url) {
	$c = curl_init($url);
	curl_setopt($c, CURLOPT_RETURNTRANSFER, 1);
	curl_setopt($c, CURLOPT_CONNECTTIMEOUT, 3);
	curl_setopt($c, CURLOPT_TIMEOUT, 5);

	return json_decode(curl_exex($c));
}

function cache($recent_tweets) {
	// [0] = current minute
	// [1] = tweet html
	global $id;

	//Aggiunge al post (solo una volta -> ultimo parametro "true") 
	//una variabile custom che indica con i tweet (cashati) 
	add_post_meta($id, 'jw_recent_tweets', $recent_tweets, true);
}

//Se la cache è troppo vecchia la resetta
function reset_data($recent_tweets, $tweet_reset_time) {
	global $id;

	//Se è settata una data nei tweet cachati
	if(isset($recent_tweets[0][0])) {
		$delay = $recent_tweets[0][0] + (int)$tweet_reset_time;
		if($delay >= 60) $delay -= 60;
		if($delay <=  (int)date('i', time())) {
			delete_post_meta($id, 'jw_recent_tweets');
		}
	}
}


/** 5
  * - 
  * Scrivere un semplice widget con title e descrizione settabile
  **/

error_reporting(E_ALL);
/*
Plugin Name: Messager Widget		
Plugin URI: giub.it			//URL Documentazione
Description: Display any message designated
Author: Daniele Covallero
Author URI: giub.it
Version: 1.0
*/

class Messager extend WP_Widget {

	//Descrizione della barra del widget nell'area amministrativa
	function __contruct() {
		$params = array(
			'description' => 'Display messages to readers',
			'name'		  => 'Messager'
		);

		parent:: __construct('Messager', '', $params);
	}

	//La form del widget che si ha quando questo è attivo
	public function form($instance) {
		extract($instance);
		?>
		<p>
			<label for="<?php echo $this->get_field_name('title'); ?>">
				Title:</label>
			<input class="widefat" 
				id="<?php echo $this->get_field_name('title'); ?>"
				name="<?php echo $this->get_field_name('title'); ?>"
				value="<?php if(isset($title)) echo esc_attr($title); ?>" />
		</p>

		<p>
			<label for="<?php echo $this->get_field_name('description'); ?>">
				Description:</label>
			<textarea class="widefat" rows="10"
				id="<?php echo $this->get_field_name('description'); ?>"
				name="<?php echo $this->get_field_name('description'); ?>"><?php if(isset($description)) echo esc_attr($description); ?>
				</textarea>
		</p>
		<?php
	}

	//Parte grafica nel frontend
	public function widget($args, $instance) {
		extract($args);
		extract($instance);

		$title = apply_filters('widget_title', $title);
		$description = apply_filters('widfet_description', $description);

		if(empty($title)) $title = 'Cosa sto pensando';

		echo $before_widget;
			echo $before_title . $title . $after_title;
			echo '<p>'.$description.'<p>';
		echo $after_widget;
	}
}

add_action('widgets_init', 'jw_register_messanger');
function jw_register_messanger() {
	register_widget('Messager');
}


/** 6
  * - 
  * Basandoci sul plugin precedente creare un widget per twitter
  **/

/*
Plugin Name: JW_Twitter_Widget		
Plugin URI: giub.it			//URL Documentazione
Description: Display any message designated
Author: Daniele Covallero
Author URI: giub.it
Version: 1.0
*/

class JW_Twitter_Widget extend WP_Widget {

	//Descrizione della barra del widget nell'area amministrativa
	function __contruct() {
		$options = array(
			'description' => 'Display and cache tweets',
			'name'		  => 'Display Tweets'
		);

		parent:: __construct('JW_Twitter_Widget', '', $options);
	}

	//La form del widget che si ha quando questo è attivo
	public function form($instance) {
		extract($instance);
		$t_id = $this->get_field_id('title');
		$usr_id = $this->get_field_id('username');
		$twn_id = $this->get_field_id('tweet_count');

		?>
		<!-- Title Field -->
		<p>
			<label for="<?=$t_id ?>">Title:</label>
			<input type="text" class="widefat"
			id="<?=$t_id ?>" name="<?=$t_id ?>"
			value="<?php if(isset($title)) echo esc_attr($title); ?>" />
 		</p>

 		<!-- Username Field -->
 		<p>
			<label for="<?=$usr_id ?>">Username:</label>
			<input type="text" class="widefat"
			id="<?=$usr_id ?>" name="<?=$usr_id ?>"
			value="<?php if(isset($username)) echo esc_attr($username); ?>" />
 		</p>

 		<!-- Tweets Number Field -->
 		<p>
			<label for="<?=$twn_id ?>">
				Number of Tweets:
			</label>

			<input type="number" class="widefat"
			style="width: 40px;" min="1" max="10"
			id="<?=$twn_id ?>" name="<?=$twn_id ?>"
			value="<?php !empty($tweet_count)? $tweet_count : 5 ?>" />
 		</p>

		<?php
	}

	//Parte grafica nel frontend
	public function widget($args, $instance) {
		extract($args);
		extract($instance);

		if(empty($title)) $title = 'Recent Tweet';

		$data = $this->twitter($tweet_count, $username);

		if($data !== false && isset($data->tweets)) {
			echo $before_widget;
				echo $before_title;
					echo $title;
				echo $after_title;

				echo '<ul><li>'.implode('</li><li>', $data->tweets).'</li></ul>'
			echo $after:widget;
		}
	}

	private function twitter($tweet_count, $username) {
		if(empty($username)) return false;

		//Prendo i dati caschati nel DB se posso
		$tweets = get_transient('recent_tweets_widget');

		if(!$tweets ||
			$tweets->username !== $username ||
			$tweets->tweet_count !== $tweet_count) {
			fetch_tweets($tweet_count, $username);
		}

		return $tweets;
	}

	private function fetch_tweets($tweet_count, $username) {
		$tweets = wp_remote_get("http://twitter.com/statuses/user_timeline/$username.json");
		$tweets = json_decode($tweets['body']);

		if(isset($tweets->error)) return false;

		//Preparo i dati in una classe vuota
		$data = new stdClass();
		$data->username = $username;
		$data->tweet_count = $tweet_count;
		$data->tweets = array();

		foreach($tweets as $tweet) {
			if($tweet_count-- === 0) break;
			$data->tweet[] = $this->filter_tweet($tweet->text);
		}

		//Casho la classe nel DB
		set_transient('recent_tweets_widget', $data, 60*5);
	}

	private function filter_tweet($tweet) {
		//Correggo i link
		$tweet = preg_replace('/(http[^\s]+)/im', '<a rel="nofollow" href="$1">$1</a>', $tweet);
	
		//Miglioro l'username
		$tweet = preg_replace('/@([^\s]+)/i', '<a href="http://twitter.com/$1" rel="nofollow">$1</a>', $tweet);
		return $tweet;
	}
}

add_action('widgets_init', 'register_jw_twitter_widget');
function register_jw_twitter_widget() {
	register_widget('JW_Twitter_Widget');
}

/** 7
  * - 
  * Creare un cron job con Wordpress + mini area amministrativa
  * che mostra i cronjob in esecuzione
  **/

/*
Plugin Name: JW Cron	
Plugin URI: giub.it			//URL Documentazione
Description: Demo WP CronJob
Author: Daniele Covallero
Author URI: giub.it
Version: 1.0
*/

add_action('init', function() {

	$time = wp_next_scheduled('jw_cron_hook');
	wp_unschedule_event($time, 'jw_cron_hook');

	if(!wp_next_scheduled('jw_cron_hook') {
		wp_schedule_event(time(), 'two-minutes', 'jw_cron_hook');
		//Non ho capito bene a cosa serve
		//wp_schedule_single_eventi(time() + 3600, 'jw_cron_hook');
	}	
});

//Area amministrativa
add_action('admin_menu', function() {
	add_options_page('Cron Settings', 'Cron Settings', 'manage settings', 'jw-cron', function() {
		$cron = get_cron_array();
		$schedules = wp_get_schedules();
		?>
		<div class="wrap">
			<h2>Cron Events Scheduled</h2>
			<?php
				foreach($schedules as $name) {
					echo "<h3>". $name['display'] . ': ' . $name['interval'] . "</h3>";
				}
			?>
		</div>
		<?php
	});
});

add_action('jw_cron_hook', function() {
	$str = time();
	wp_mail('web@giub.it', 'Scheduled with WP Cron!', "This email was sent at $str.");
});

add_filter('cron_schedules', function($schedules) {
	$schedules['two-minutes'] = array (
		'interval'	=> 120,
		'display'	=> 'Evry two minutes'
	);

	$schedules['ten-miuìnutes'] = array(
		'interval'  => 600,
		'display'	=> 'Every Ten Minutes'
	);

	return $schedules;
});

/** 7
  * - 
  * Creare una pagina ammistrativa per customizzare il tema
  **/

/*
Plugin Name: JW Options	
Plugin URI: giub.it			//URL Documentazione
Description: Demo WP Options
Author: Daniele Covallero
Author URI: giub.it
Version: 1.0
*/

//NOTA: http://.../wp-admin/options.php contiene un array con tutte le opzioni del nostro sito wordpress

//NOTA: Il plugin fa uno storage delle optioni in un'array, per richiamarlo nel frontend: $o = get_options('jw_plugin_options');

class JW_Options {
	ublic $options;

	public function __construct() {
		$this->register_settings_and_fields();
		$options = get_option('jw_plugin_options');
	}

	public function add_menu_page() {
		add_options_page('Theme Options', 'Theme Options', 'administrator', __FILE__, array(JW_Options, 'display_options_page'));
	}

	public function display_options_page() {
		?>
		<div class="wrap">
			<?php screen_icon(); ?>
			<h2>My Theme Options</h2>
			<form method="post" action="options.php" enctype="multipart/form-data">
				<?php settings_fields('jw_plugin_options'); ?>
				<?php do_settings_sections(__FILE__); ?>
				<p class="submit">
					<input name="submit" type="submit" class="button-primary" value="Save Changes" />
				</p>
			</form> 
		</div>
		<?php
	}

	public function register_register_and_fields() {
		//1° parametro custom come si vuole
		register_setting('jw_plugin_options', 'jw_plugin_options', $array($this, 'jw_validate_settings')); //3rd param = optional cb

		add_setting_section('jw_main_section', 'Main Settings', array($this, 'jw_main_section_cb'), __FILE__); //id, title, cb, witch page

		//Banner Field
		add_settings_field('jw_banner_heading', 'Baner Heading',  array($this, 'jw_banner_heading_setting'), __FILE__, 'jw_main_section');

		//Logo Field
		add_settings_field('jw_logo', 'Your Logo',  array($this, 'jw_logo_setting'), __FILE__, 'jw_main_section');

		add_settings_field('jw_cholor_scheme', 'Your Desire Color Scheme',  array($this, 'jw_cholor_scheme_setting'), __FILE__, 'jw_main_section');

	}

	public function jw_main_section_cb() {
		// optional
	}

	public function jw_validate_settings($plugin_options) {

		//Is the file an image?
		if(!empty($_FILES['jw_logo_upload']['tmp_name'])) {
			$override = array('test_form' => false);
			$file = wp_handle_upload($_FILES['jw_logo_upload'], $override);
			$plugin_options['jw_logo'] = $file['url'];
		} else {
			$plugin_options['jw_logo'] = $this->options['jw_logo'];
		}

		return $plugin_options;
	}

	/*
	 * INPUTS
	 */
	
	//Banner Heading
	public function jw_banner_heading_setting() {
		echo "<input name='jw_plugin_options[jw_banner_heading]' type='text' value='{$this->options['jw_banner_heading']}' />";
	}

	//Your Logo
	public function jw_logo_setting() {
		echo '<input type="file" name="jw_logo_upload" /><br /><br />';
		if(isset($this->options['jw_logo'])) {
			echo "<img src='{$this->options['jw_logo']}' />";
		}
	}

	//Color Schema
	public function jw_cholor_scheme_setting() {
		$items = array('Red', 'Green', 'Blue', 'Yellow');
		echo "<select name='jw_plugin_optons[jw_color_scheme]'>";
		foreach($items as $item) {
			$selected = ($this->options['jw_color_scheme'] === $item)? 'selected="selected"' : '';
			echo "<option value='$item' $selected>$item</option>";
		}
		echo "</select>";
			
	}
}

add_action('admin_menu', function() {
	JW_Options::add_menu_page();
});

add_action('admin_init', function() {
	new JW_Options();
});
